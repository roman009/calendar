<?php

namespace App\Command;

use App\Service\SmartInvite\Create\Create;
use App\Service\SmartInvite\Organizer\DefaultOrganizer;
use App\Entity\SmartInvite\SmartInvite;
use App\Entity\SmartInvite\SmartInviteAttachment;
use App\Entity\SmartInvite\SmartInviteEvent;
use App\Entity\SmartInvite\SmartInviteOrganizer;
use App\Entity\SmartInvite\SmartInviteRecipient;
use App\Repository\AccountUserRepository;
use App\Repository\SmartInvite\SmartInviteAttachmentRepository;
use App\Repository\SmartInvite\SmartInviteEventRepository;
use App\Repository\SmartInvite\SmartInviteOrganizerRepository;
use App\Repository\SmartInvite\SmartInviteRecipientRepository;
use App\Repository\SmartInvite\SmartInviteRepository;
use Eluceo\iCal\Component\Calendar;
use Eluceo\iCal\Property\Event\Attendees;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class SmartInviteGenerationTestCommand extends Command
{
    protected static $defaultName = 'app:smart-invite-send-test';

    /**
     * @var AccountUserRepository
     */
    private $accountUserRepository;
    /**
     * @var \Swift_Mailer
     */
    private $mailer;
    /**
     * @var Create
     */
    private $create;

    public function __construct(
        Create $create,
        AccountUserRepository $accountUserRepository,
        \Swift_Mailer $mailer,
        ?string $name = null
    ) {
        parent::__construct($name);
        $this->accountUserRepository = $accountUserRepository;
        $this->mailer = $mailer;
        $this->create = $create;
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $accoutUser = $this->accountUserRepository->find(1);
        $smtpPostmaster = 'postmaster@sandboxf05b190d1444418fb0b4407bfe487b16.mailgun.org';

        $smartInvite = $this->create->handle(
            $accoutUser,
            'some-invite-iddd',
            'https://enwvy220zidp.x.pipedream.net',
            'Valeriu the organizer',
            'valeriu@buzilatestcompany.onmicrosoft.com',
            'Gigle',
            'this is the event summary',
            new \DateTime('2019-03-28 13:00'),
            new \DateTime('2019-03-28 14:00'),
            'CET',
            '69th floor',
            'some cool event'
        );

//        $smartInvite = (new SmartInvite)
//            ->setSmartInviteId('some-invite-iddd')
//            ->setCallbackUrl('https://postb.in/XEkkZ1Sv')
//            ->setAccountUser($accoutUser);
//        $this->smartInviteRepository->persistAndFlush($smartInvite);
//
//        $timezone = 'CET';
//        $smartInvite
//            ->setOrganizer(
//                (new SmartInviteOrganizer)
//                ->setName('The actual organizer')
//                ->setAccountUser($accoutUser)
//                ->setEmail(DefaultOrganizer::getEmail())
//            )
//            ->setRecipient(
//                (new SmartInviteRecipient)
//                ->setEmail('valeriu@buzilatestcompany.onmicrosoft.com')
////                ->setEmail('valeriu.buzila@gmail.com')
//                ->setAccountUser($accoutUser)
//                ->setName('Gigel')
//            )
//            ->setEvent(
//                (new SmartInviteEvent)
//                ->setSummary('this is the event summary')
//                ->setStart(new \DateTime('2019-03-28 11:00', new \DateTimeZone($timezone)))
//                ->setEnd(new \DateTime('2019-03-28 13:00', new \DateTimeZone($timezone)))
//                ->setLocation('1st floor')
//                ->setTimezone($timezone)
//                ->setAccountUser($accoutUser)
//                ->setDescription('this is the event description')
//            );
//
//        $organizer = $smartInvite->getOrganizer();
////        $organizer->setEmail($smartInvite->getObjectId() . '+' . $organizer->getEmail());
//        $organizer->setSmartInvite($smartInvite);
//
//        $recipient = $smartInvite->getRecipient();
//        $recipient->setSmartInvite($smartInvite);
//
//        $event = $smartInvite->getEvent();
//        $event->setSmartInvite($smartInvite);
//
//        $this->recipientRepository->persistAndFlush($recipient);
//        $this->organizerRepository->persistAndFlush($organizer);
//        $this->eventRepository->persistAndFlush($event);
//
//        $this->smartInviteRepository->persistAndFlush($smartInvite);
//
//        $vcalendar = new Calendar('//Calendar//Calendar.lan 0.1//EN');
//        $vattendees = new Attendees();
//        $vattendees->add('MAILTO:' . $recipient->getEmail(), [
//            'CUTYPE' => 'INDIVIDUAL',
//            'ROLE' => 'REQ-PARTICIPANT',
//            'PARTSTAT' => 'NEEDS-ACTION',
//            'X-NUM-GUESTS' => '0',
//            'RSVP' => 'TRUE',
//            'CN' => $recipient->getName(),
//        ]);
//        $vattendees->add('MAILTO:' . $organizer->getEmail(), [
//            'CUTYPE' => 'INDIVIDUAL',
//            'ROLE' => 'REQ-PARTICIPANT',
//            'PARTSTAT' => 'ACCEPTED',
//            'X-NUM-GUESTS' => '0',
//            'RSVP' => 'TRUE',
//            'CN' => $organizer->getName(),
//        ]);
////        $voganizer = new \Eluceo\iCal\Property\Event\Organizer('organizer@calendar.lan', [
////        $voganizer = new \Eluceo\iCal\Property\Event\Organizer('MAILTO:' . 'valeriu@buzilatestcompany.onmicrosoft.com', [
//        $voganizer = new \Eluceo\iCal\Property\Event\Organizer('MAILTO:' . $organizer->getEmail(), [
//            'CN' => $organizer->getName()
//        ]);
////        $vevent = new \Eluceo\iCal\Component\Event($smartInvite->getObjectId() . '+invite@calendar.lan');
//        $vevent = new \Eluceo\iCal\Component\Event($smartInvite->getObjectId() . '+' . $organizer->getEmail());
//        $vevent
//            ->setSummary($event->getSummary())
//            ->setDtStart($event->getStart())
//            ->setDtEnd($event->getEnd())
//            ->setOrganizer($voganizer)
//            ->setAttendees($vattendees)
//            ->setLocation($event->getLocation())
//            ->setStatus(\Eluceo\iCal\Component\Event::STATUS_CONFIRMED)
//            ->setTimezoneString((new \DateTimeZone($timezone))->getName())
//            ->setDescription($event->getDescription())
//            ->setCreated($event->getCreated())
//            ->setDtStamp($event->getCreated());
//        $vcalendar->addComponent($vevent);
////        $vcalendar->setTimezone($smartInvite->getEvent()->getTimezone());
//        $vcalendar->setMethod('REQUEST');
//        $vcalendar->setCalendarScale('GREGORIAN');
//
//        dump($smartInvite);
//
//        $vcalendarRender = $vcalendar->render();
//        dump($vcalendarRender);
//
//        $attachment = (new SmartInviteAttachment)
//            ->setSmartInvite($smartInvite)
//            ->setAccountUser($accoutUser)
//            ->setIcalendar($vcalendar->render());
//
//        $this->attachmentRepository->persistAndFlush($attachment);

        $messageAttachment = new \Swift_Attachment($smartInvite->getAttachments()[0]->getIcalendar(), 'cal.ics', 'text/calendar');
        $message = (new \Swift_Message('Hello Email'))
            ->setFrom($smtpPostmaster)
            ->setTo($smartInvite->getRecipient()->getEmail())
            ->setBody('see attached calendar invite', 'text/html')
            ->addPart('see attached calendar invite', 'text/plain')
            ->attach($messageAttachment);

        $messagePart = new \Swift_MimePart($smartInvite->getAttachments()[0]->getIcalendar(), 'text/calendar; method=REQUEST', 'UTF-8');
        $messagePart->setEncoder(new \Swift_Mime_ContentEncoder_PlainContentEncoder('7bit'));

        $message->attach($messagePart);

        $this->mailer->send($message);
    }
}
