<?php

namespace App\Command;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Service\Calendar\Connector\Connector;
use App\Service\Calendar\Fetch\Fetch;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class GoogleAuthTestCommand extends Command
{
    protected static $defaultName = 'app:google-auth-test';
    /**
     * @var UserRepository
     */
    private $userRepository;
    /**
     * @var Connector
     */
    private $connector;
    /**
     * @var Fetch
     */
    private $fetch;

    public function __construct(UserRepository $userRepository, Connector $connector, Fetch $fetch, ?string $name = null)
    {
        parent::__construct($name);
        $this->userRepository = $userRepository;
        $this->connector = $connector;
        $this->fetch = $fetch;
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
//        $user = (new User)->setEmail('valeriu.buzila@gmail.com');
//        $this->userRepository->persistAndFlush($user);

        $user = $this->userRepository->findOneBy(['email' => 'valeriu.buzila@gmail.com']);
        $accountUser = $user->getAccountUsers()[0];

        $service = 'google';

        if (!$this->connector->isRegistered($accountUser, $service)) {
            $this->connector->register($accountUser, $service);
        }

        $token = $this->connector->getToken($accountUser, $service);

        dump($token);

        $calendars = $this->fetch->calendars($service, $token);
//        dump($calendars);

//        $freeBusy = $this->fetch->freeBusy($service, $token, new \DateTime(), (new \DateTime())->add(\DateInterval::createFromDateString('+20 days')), $calendars);
//        dump($freeBusy);

        foreach ($calendars as $calendar) {
            dump($calendar);
            $events = $this->fetch->events(
                $service,
                $token,
                (new \DateTime())->add(\DateInterval::createFromDateString('-20 days')),
                (new \DateTime())->add(\DateInterval::createFromDateString('+20 days')),
                $calendar->getCalendarId()
            );
            dump($events);
        }
    }
}
